{
  "version": 3,
  "sources": ["../../vue-device-detector-js/index.js"],
  "sourcesContent": ["import DeviceDetector from \"device-detector-js\";\r\nimport BotDetector from \"device-detector-js/dist/parsers/bot\";\r\n\r\n\r\nconst deviceDetector = new DeviceDetector();\r\nconst detector = deviceDetector.parse(window.navigator.userAgent);\r\nconst botDetector = new BotDetector();\r\nconst bot = botDetector.parse(window.navigator.userAgent);\r\n\r\nfunction devices() {\r\n\r\n    return {\r\n\r\n        isMobile: detector.device.type == \"smartphone\",\r\n        isTablet: detector.device.type == \"tablet\",\r\n        isDesktop: detector.device.type == \"desktop\",\r\n\r\n        model: detector.device.model,\r\n        brand: detector.device.brand,\r\n        type: detector.device.type,\r\n        os_name: detector.os,\r\n        os_platform: detector.os.platform,\r\n        os_version: detector.os.version,\r\n        browser_name: detector.client.name,\r\n        browser_version: detector.client.version,\r\n        browser_engine: detector.client.engine,\r\n        browser_engine_version: detector.client.engineVersion,\r\n\r\n        browser: {\r\n            chrome: detector.client.name == \"Chrome\",\r\n            chrome_view: detector.client.name == \"Chrome Webview\",\r\n            chrome_mobile: detector.client.name == \"Chrome Mobile\",\r\n            chrome_mobile_ios: detector.client.name == \"Chrome Mobile iOS\",\r\n            safari: detector.client.name == \"Safari\",\r\n            safari_mobile: detector.client.name == \"Mobile Safari\",\r\n            msedge: detector.client.name == \"Microsoft Edge\",\r\n            msie_mobile: detector.client.name == \"IE Mobile\",\r\n            msie: detector.client.name == \"Internet Explorer\"\r\n        },\r\n\r\n        os: {\r\n            android: detector.os.name == \"Android\",\r\n            blackberry: detector.os.name == \"BlackBerry OS\",\r\n            ios: detector.os.name == \"iOS\",\r\n            windows: detector.os.name == \"Windows\",\r\n            windows_phone: detector.os.name == \"Windows Phone\",\r\n            mac: detector.os.name == \"Mac\",\r\n            linux: detector.os.name == \"GNU/Linux\" || detector.os.name == \"GNU\\/Linux\",\r\n            chrome: detector.os.name == \"Chrome OS\",\r\n            firefox: detector.os.name == \"Firefox OS\",\r\n            gamingConsole: detector.os.name == \"Gaming Console\"\r\n        },\r\n\r\n        isAndroid: detector.os.name == \"Android\",\r\n        isBlackberry: detector.os.name == \"BlackBerry OS\",\r\n        isIOS: detector.os.name == \"iOS\",\r\n        isWindows: detector.os.name == \"Windows\",\r\n        isWindowsPhone: detector.os.name == \"Windows Phone\",\r\n        isOsx: detector.os.name == \"Mac\",\r\n        isLinux: detector.os.name == \"GNU/Linux\" || detector.os.name == \"GNU\\/Linux\",\r\n        isChromeOs: detector.os.name == \"Chrome OS\",\r\n        isFireFoxOS: detector.os.name == \"Firefox OS\",\r\n        GamingConsole: detector.os.name == \"Gaming Console\",\r\n        isBot: bot,\r\n\r\n\r\n\r\n        machine: {\r\n            brand: detector.device.brand,\r\n            model: detector.device.model,\r\n            os_name: detector.os.name,\r\n            os_version: detector.os.version,\r\n            type: detector.device.type,\r\n        },\r\n        bot: bot,\r\n        client: detector.client,\r\n        device: detector.device\r\n    }\r\n\r\n\r\n}\r\n\r\nconst device = {\r\n    install(Vue, options) {\r\n        Vue.prototype.$device = devices()\r\n    }\r\n}\r\n\r\n\r\nexport default device"],
  "mappings": ";;;;;;;;;;;AAAA,gCAA2B;AAC3B,iBAAwB;AAGxB,IAAM,iBAAiB,IAAI,0BAAAA,QAAe;AAC1C,IAAM,WAAW,eAAe,MAAM,OAAO,UAAU,SAAS;AAChE,IAAM,cAAc,IAAI,WAAAC,QAAY;AACpC,IAAM,MAAM,YAAY,MAAM,OAAO,UAAU,SAAS;AAExD,SAAS,UAAU;AAEf,SAAO;AAAA,IAEH,UAAU,SAAS,OAAO,QAAQ;AAAA,IAClC,UAAU,SAAS,OAAO,QAAQ;AAAA,IAClC,WAAW,SAAS,OAAO,QAAQ;AAAA,IAEnC,OAAO,SAAS,OAAO;AAAA,IACvB,OAAO,SAAS,OAAO;AAAA,IACvB,MAAM,SAAS,OAAO;AAAA,IACtB,SAAS,SAAS;AAAA,IAClB,aAAa,SAAS,GAAG;AAAA,IACzB,YAAY,SAAS,GAAG;AAAA,IACxB,cAAc,SAAS,OAAO;AAAA,IAC9B,iBAAiB,SAAS,OAAO;AAAA,IACjC,gBAAgB,SAAS,OAAO;AAAA,IAChC,wBAAwB,SAAS,OAAO;AAAA,IAExC,SAAS;AAAA,MACL,QAAQ,SAAS,OAAO,QAAQ;AAAA,MAChC,aAAa,SAAS,OAAO,QAAQ;AAAA,MACrC,eAAe,SAAS,OAAO,QAAQ;AAAA,MACvC,mBAAmB,SAAS,OAAO,QAAQ;AAAA,MAC3C,QAAQ,SAAS,OAAO,QAAQ;AAAA,MAChC,eAAe,SAAS,OAAO,QAAQ;AAAA,MACvC,QAAQ,SAAS,OAAO,QAAQ;AAAA,MAChC,aAAa,SAAS,OAAO,QAAQ;AAAA,MACrC,MAAM,SAAS,OAAO,QAAQ;AAAA,IAClC;AAAA,IAEA,IAAI;AAAA,MACA,SAAS,SAAS,GAAG,QAAQ;AAAA,MAC7B,YAAY,SAAS,GAAG,QAAQ;AAAA,MAChC,KAAK,SAAS,GAAG,QAAQ;AAAA,MACzB,SAAS,SAAS,GAAG,QAAQ;AAAA,MAC7B,eAAe,SAAS,GAAG,QAAQ;AAAA,MACnC,KAAK,SAAS,GAAG,QAAQ;AAAA,MACzB,OAAO,SAAS,GAAG,QAAQ,eAAe,SAAS,GAAG,QAAQ;AAAA,MAC9D,QAAQ,SAAS,GAAG,QAAQ;AAAA,MAC5B,SAAS,SAAS,GAAG,QAAQ;AAAA,MAC7B,eAAe,SAAS,GAAG,QAAQ;AAAA,IACvC;AAAA,IAEA,WAAW,SAAS,GAAG,QAAQ;AAAA,IAC/B,cAAc,SAAS,GAAG,QAAQ;AAAA,IAClC,OAAO,SAAS,GAAG,QAAQ;AAAA,IAC3B,WAAW,SAAS,GAAG,QAAQ;AAAA,IAC/B,gBAAgB,SAAS,GAAG,QAAQ;AAAA,IACpC,OAAO,SAAS,GAAG,QAAQ;AAAA,IAC3B,SAAS,SAAS,GAAG,QAAQ,eAAe,SAAS,GAAG,QAAQ;AAAA,IAChE,YAAY,SAAS,GAAG,QAAQ;AAAA,IAChC,aAAa,SAAS,GAAG,QAAQ;AAAA,IACjC,eAAe,SAAS,GAAG,QAAQ;AAAA,IACnC,OAAO;AAAA,IAIP,SAAS;AAAA,MACL,OAAO,SAAS,OAAO;AAAA,MACvB,OAAO,SAAS,OAAO;AAAA,MACvB,SAAS,SAAS,GAAG;AAAA,MACrB,YAAY,SAAS,GAAG;AAAA,MACxB,MAAM,SAAS,OAAO;AAAA,IAC1B;AAAA,IACA;AAAA,IACA,QAAQ,SAAS;AAAA,IACjB,QAAQ,SAAS;AAAA,EACrB;AAGJ;AAEA,IAAM,SAAS;AAAA,EACX,QAAQ,KAAK,SAAS;AAClB,QAAI,UAAU,UAAU,QAAQ;AAAA,EACpC;AACJ;AAGA,IAAO,iCAAQ;",
  "names": ["DeviceDetector", "BotDetector"]
}
